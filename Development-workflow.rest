

.. contents:: Table of Contents

====================
How to send a patch
====================

Intro
=====

License: New BSD License (see the LICENSE file for details) covers all files in the sympy repository unless stated otherwise.

There are a few ways to create and send a patch.

The best way is to send a github pull request against the sympy/sympy repository. We'll review it and push it in. 
The github pull request is a preferred method, as that makes it easy for us to review and push the code in.

More quickly, but not convenient for reviewing and merging, is to create patch-file with the help of pure git.
This way can be used if the patch has high-priority or significant, only one or two files are involved or you just have not enough time for more accurate way.
(We will be thankful for any improvments of sympy.)

The basic work-flow for both variants is consist of a few stages:

1. Create your envirenment, if it was not created earler.
2. Create separated branch
3. Modify code and/or create tests of it
4. Be sure that all tests of sympy have been passed.
5. Only then commit changes
6. Create patch file or pull request for github.

All those are described in the details below `Workflow`_, but before it it would be useful to acquaint with `Coding conventions in Sympy`_.

If you have any questions you can ask them to us on the `mailinglist <http://groups.google.com/group/sympy>`_. 

_`Coding conventions in Sympy`
==============================

Standard Python coding conventions
-----------------------------------

Follow the standard Style Guide for Python Code when writing code for Sage, as explained at the following URLs:

    - http://www.python.org/dev/peps/pep-0008
    - http://www.python.org/dev/peps/pep-0257

In particular,

- Use 4 spaces for indentation levels.

- Use all lowercase function names with words separated by
  underscores. For example, you are encouraged to write Python
  functions using the naming convention

  ::

      def set_some_value()

  instead of the CamelCase convention.
  
- Use CamelCase for class names and major functions that create
  objects, e.g.
  
  ::
  
      class PolynomialRing()
  
Note, however, that some functions do have uppercase letters where it makes sense. for example for matrices they are LUdecomposition or T (transposition) methods.

Documentation strings
----------------------

The beginning of the docstring of methods or properties would look like this::

    """
    Extract a submatrix by specifying a list of rows and columns
    
    According to the "try_block_diag" parameter, it will try to form block
    diagonal matrices using the method get_diag_blocks(), invert these
    individually, and then reconstruct the full inverse matrix.

    Examples
    --------
    >>> from sympy import Matrix
    >>> m = Matrix(4, 3, lambda i, j: i*3 + j)
    >>> m
    [0,  1,  2]
    [3,  4,  5]
    [6,  7,  8]
    [9, 10, 11]
    >>> m.extract([0,1,3],[0,1])   #doctest: +NORMALIZE_WHITESPACE
    [0,  1]
    [3,  4]
    [9, 10]

    See also: .submatrix()
    """
    
Also, if you start a module, docstring has to contain the description of main functions or classes if they are present.



_`Workflow`
=============

Create your envirenment
------------------------

Creating of environment is once-only.

github
~~~~~~~

As you are going to use `github <https://github.com/>`_  you should have a GitHub account. If you have not one yet then just sign up at:

    https://github.com/signup/free

Then begin your own *forking* of SymPy project (If you have not yet). Go at SymPy git hub page:

    https://github.com/sympy/sympy
    
and click the “Fork” button.

image:: http://help.github.com/images/bootcamp/bootcamp_3_fork.jpg

Now you have your own repository respect to SymPy project. If your username in github is `mynick` then the forked project will be placed somthing like:
    
    https://github.com/mynick/sympy
    

On your local machine choose work place for it, and clone (download) code of it::

    git clone git@github.com:mynick/sympy.git
    
and::

    cd sympy


Do not forget to go to the `Create separated branch`_ instructions before code changing.

Qiuck patch
~~~~~~~~~~~~~~

In this way just clone read-only copy::

    git clone git://github.com/sympy/sympy.git
    
and::

    cd sympy




Create separated branch
------------------------

Think about branch name, that is similar to  topic of the patch or pull request, but short.
If you know issue number then the branch name would be something like `1234_sequences`. So create it::

    git branch '1234_sequences'
    git checkout '1234_sequences'

To view in what branch you are type::

    git branch
    
And remember, **never type the following commands in master** (git status will tell you what branch you are in): `git merge`, `git commit`, `git rebase`.
    


Code modification
------------------



Be sure that all tests of sympy have been passed
-------------------------------------------------

To ensure everything stays in shape, let’s see if all tests pass::

    ./bin/test 
    ./bin/doctest 
    

if they are not passed all, then the warning *DO NOT COMMIT* will appear.

if you want to test one set of tests try::

    ./bin/test sympy/concrete/tests/test_products.py

but at the same time you must be sure that yours tests are connected with `./bin/test` properly too.


Commit the changes
-----------------------------

You can check what files are changed::

    git status

And them to be upon version control system if nessesry::

    git add `new_file.py`
    
Check total changes if it is interesting::
    
    git diff
    
So you are ready to commit changes in your local version control system. It is logical operation so it must contain `commit message` described it.

It is best if your commit messages are wrapped so that no line is longer than 80 characters.  Also, the first line should be separated from the rest of the message by a blank line.  This makes the message work the best with the various things in git and GitHub that show the message.

if your `commit message` is one line then you can use this command::

    git commit -m "1234: sequences base implementation"
    
or::

    git commit
    
if you plan to enter big description: editor windows will appear automatically in this case.

Create patch file or pull request for github
----------------------------------------------

github
~~~~~~~

Be sure that you are in your own branch, and run::

    git push `1234_sequences`

Then navigate to your repository with the changes you want someone else to pull:

    https://github.com/mynick/sympy    
    
Select branch, and press the Pull Request button.

image:: http://img.skitch.com/20100831-qfk1c9wyt89pfgfxg61bh1r8rn.png

That's all.

Qiuck patch
~~~~~~~~~~~~~~

If you do not use github, then after code modification, testing and commit operation just create patch-file::

    git format-patch master --stdout > 1234_sequences_base_implementation.patch

And send us it.


More about instruments
=======================

git
----

github
-------

Links
======
This page based upon present SymPy pages [1-6], github help [7-8] and inspired by Sage guide [9]:

* [1] http://docs.sympy.org/dev/sympy-patches-tutorial.html#quick-start
* [2] http://sympy.org/development.html
* [3] https://github.com/sympy/sympy/wiki
* [4] https://github.com/sympy/sympy/wiki/Pushing-patches
* [5] https://github.com/sympy/sympy/wiki/Getting-the-bleeding-edge
* [6] https://github.com/sympy/sympy/wiki/Git-hg-rosetta-stone
* [7] http://help.github.com/pull-requests/
* [8] http://help.github.com/fork-a-repo/
* [9] http://sagemath.org/doc/developer/
