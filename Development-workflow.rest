=====================
Development workflow
=====================

.. epigraph:: Talk is cheap. Show me the code.

    -- Linus Torvalds [1]_

.. contents:: Table of Contents




Introduction
=============

In SymPy_ we encourage collaborative work.

Everyone is welcome to join and to implement new feature, fix some bug, give
general advice, etc... Also, we try to discuss everything and to review each
other's work so that many eyes can see more thus raising the quality.

General discussion takes place on `sympy@googlegroups.com`_ mailing list and in
the issues_, and the code is discussed in `sympy-patches@googlegroups.com`_
mailing list.

As someone of you already know, software development is not just coding. A lot
of non-coding tasks have to be done in order to produce *good* code. Just to
mention a few: setting up infrastructure, designing, testing, documenting,
assisting new developers (we are doing it here), and of course programming.

But even programming is not all about writing the code, it is about writing the
code *and* preparing it so that the code can be included into the project.

Both producing the code and bringing it to the project are important parts of
the game -- without the code there is nothing to bring in, and having the code
outside is a nowin for anyone.

As already said above, we review changes. This idea was borrowed from
successful projects like Linux, Python, SAGE and a lot more. In short each
change is first reviewed by other developers and only when it is approved the
code is pushed in.

Like it takes effort to write good and clear code, reviewing other's work needs
effort too. There are good practices how to do things so that reviewing is fun
for both the author and the reviewer. We try to follow them, and we'll try to
show you how to follow too.

By the way, when reviewing other's patches you *learn* a lot, so why not to join as a reviewer too?


How to send a patch
===================

License: 'New BSD License'_ (see the `LICENSE`_ file for details) covers all files in the SymPy repository unless stated otherwise.

There are a few ways to create and send a patch.

The best way is to send a github pull request against the `sympy/sympy`_ repository. We'll review it and push it in. 
The github pull request is a preferred method, as that makes it easy for us to review and push the code in.

More quickly, but not convenient for reviewing and merging, is to create patch-file with the help of pure git.
This way can be used if the patch has high-priority or significant, only one or two files are involved or you just have not enough time for more accurate way.
(We will be thankful for any improvements of sympy.)

The basic work-flow for both variants is consist of a few stages:

1. Create your environment, if it was not created earlier.
2. Create separated branch
3. Modify code and/or create tests of it
4. Be sure that all tests of SymPy have been passed.
5. Only then commit changes
6. Create patch file or pull request for github.

All those are described in the details below `Workflow process`_, but before it it would be useful to acquaint with `Coding conventions in Sympy`_.

If you have any questions you can ask them to us on the `mailinglist`_. 


Coding conventions in Sympy
============================

Standard Python coding conventions
-----------------------------------

Follow the standard Style Guide for Python Code when writing code for Sage, as explained at the following URLs:

    - http://www.python.org/dev/peps/pep-0008
    - http://www.python.org/dev/peps/pep-0257

In particular,

- Use 4 spaces for indentation levels.

- Use all lowercase function names with words separated by
  underscores. For example, you are encouraged to write Python
  functions using the naming convention

  ::

      def set_some_value()

  instead of the CamelCase convention.
  
- Use CamelCase for class names and major functions that create
  objects, e.g.
  
  ::
  
      class PolynomialRing(object)
  
Note, however, that some functions do have uppercase letters where it makes sense. for example for matrices they are LUdecomposition or T (transposition) methods.

Documentation strings
----------------------

The beginning of the docstring of methods or properties would look like this::

    """
    Extract a submatrix by specifying a list of rows and columns
    
    According to the "try_block_diag" parameter, it will try to form block
    diagonal matrices using the method get_diag_blocks(), invert these
    individually, and then reconstruct the full inverse matrix.

    Examples
    --------
    >>> from sympy import Matrix
    >>> m = Matrix(4, 3, lambda i, j: i*3 + j)
    >>> m
    [0,  1,  2]
    [3,  4,  5]
    [6,  7,  8]
    [9, 10, 11]
    >>> m.extract([0,1,3],[0,1])   #doctest: +NORMALIZE_WHITESPACE
    [0,  1]
    [3,  4]
    [9, 10]
    
    References
    ----------
    .. [1] W. Zhou & D.J. Jeffrey, "Fraction-free matrix factors: new forms
    for LU and QR factors". Frontiers in Computer Science in China,
    Vol 2, no. 1, pp. 67-80, 2008.

    See Also
    --------
    .submatrix()   : extract block from Matrix
    .T, diag()
    
    """
    
Also, if you start a module, docstring has to contain the description of main functions or classes if they are present.



Workflow process
=================

Here we'll describe the workflow using real world example where we fix some bug.

Create your environment
------------------------

Creating of environment is once-only.

Github variant
~~~~~~~~~~~~~~~

As you are going to use `GitHub`_  you should have a GitHub account. If you have not one yet then just sign up at:

    - https://github.com/signup/free

Then begin your own *forking* of SymPy project (If you have not yet). Go at the SymPy github page:

    - https://github.com/sympy/sympy
    
and click the “Fork” button.

.. image:: http://help.github.com/images/bootcamp/bootcamp_3_fork.jpg

Now you have your own repository respect to SymPy project. If your username in github is `mynick` then the forked project will be placed something like:
    
    - https://github.com/mynick/sympy
    

On your local machine choose work place, and clone (download) code of SymPy original repository::

    git clone git://github.com/sympy/sympy.git
    cd sympy

Then assign your read-and-write repo to a remote called "github"::

    git remote add github git@github.com:mynick/sympy.git
    git pull



Do not forget to go to the `Create separated branch`_ instructions before code changing.

Quick patch variant
~~~~~~~~~~~~~~~~~~~~

In this way just clone read-only copy::

    git clone git://github.com/sympy/sympy.git
    
and::

    cd sympy

Note that using GitHub is highly recommended, as it makes things easier for both us and you.


Create separated branch
------------------------

Think about branch name, that is similar to  topic of the patch or pull request, but short.
If you know the issue number then the branch name would be something like `1234_sequences`. So create it (first command) and go into (second) ::

    git branch 1234_sequences
    git checkout 1234_sequences

or in one command using ::

    git checkout -b 1234_sequences
To view in what branch you are type::

    git branch
    
And remember, **never type the following commands in master**: `git merge`, `git commit`, `git rebase`.
    

Code modification
------------------

...


Be sure that all tests of SymPy have been passed
-------------------------------------------------

To ensure everything stays in shape, let’s see if all tests pass::

    ./bin/test 
    ./bin/doctest 
    

If they are not passed all, then the warning *DO NOT COMMIT* will appear.

If you want to test only one set of tests try::

    ./bin/test sympy/concrete/tests/test_products.py

but at the same time you must be sure that yours tests are connected with `./bin/test` properly too.


Commit the changes
-----------------------------

You can check what files are changed::

    git status

Add new files to be upon version control system if necessary::

    git add new_file.py


Check total changes if it is interesting::
    
    git diff
    
So you are ready to commit changes in your local version control system. A commit also contains a `commit message` which describes it.

It is best if your commit messages are wrapped so that no line is longer than 80 characters.
Also, the first line should be separated from the rest of the message by a blank line.
This makes the message work the best with the various things in git and GitHub that show the message.

If your `commit message` is one line then you can use this command::

    git commit -m "1234: sequences base implementation"
    
or if you plan to enter big description::

    git commit
    
And editor windows will appear automatically in this case. In Linux, this is vim by default.  You can change what editor pops up by changing the `$EDITOR` shell variable.

Also with the help of option `-a` you can tell to the command `commit` to automatically stage files that have been modified and deleted, but new files you have not told git about will not be affected, e.g.::

    git commit -a -m "1234: sequences base implementation"

If you want to stage only part of your changes, you can use the interactive commit feature.  Just type::

    git commit -i

and choose the changes you want in the resulting interface.


Create patch file or pull request for github
----------------------------------------------

Github variant
~~~~~~~~~~~~~~~

Be sure that you are in your own branch, and run::

    git push github 1234_sequences

Then navigate to your repository with the changes you want someone else to pull:

    https://github.com/mynick/sympy    
    
Select branch, and press the `Pull Request` button.

.. image:: http://img.skitch.com/20100831-qfk1c9wyt89pfgfxg61bh1r8rn.png

After pressing the `Pull Request` button, you are presented with a preview page where you can enter a title and optional description, see exactly what commits will be included when the pull request is sent, and also see who the pull request will be sent to:

.. image:: http://img.skitch.com/20100831-qit9sjhuqk42t4ww91ifm5tm81.png

If you’re sending from a topic branch, the title is pre-filled based on the name of the branch. Markdown is supported in the description, so you can embed images or use preformatted text blocks.

You can switch to the `Commits` tab to ensure that the correct set of changes is being sent. And review the diff of all changes by switching to the `Files Changed`.

Once you’ve entered the title and description, made any necessary customizations to the commit range, and reviewed the commits and file changes to be sent, press the `Send pull request` button.

The pull request is sent immediately. You’re taken to the main pull request discussion and review page. Additionally, all repository collaborators and followers will see an event in their dashboard.

That's all.

See also `Updating your pull request`_

Quick patch variant
~~~~~~~~~~~~~~~~~~~~

If you do not use github, then after code modification, testing and commit operation just create patch-file::

    git format-patch master --stdout > 1234_sequences_base_implementation.patch

And send us it.  Note that the GitHub variant is *highly* preferred, and will increase your chances of the patch not being lost or forgotten about.


Updating your pull request
---------------------------

If after a time you need to make changes in pull request then the best way is to again add new commit in you local repository and simply repeat push command::

    git commit -m "1234: some additional corrections"
    git push github 1234_sequences

Note that if you do any rebasing or in any way edit your commit history, you will have to add the `-f` option to push for it to work::

    git push -f github

Synchronization with master `sympy/sympy`.
-------------------------------------------

When clone a repo, it has a default remote called origin that points to your fork on GitHub, not the original 
repo it was forked from. To keep track of the original repo, you need to add another remote named upstream::

Assigns the original repo to a remote called "upstream"::

    git pull


This page based upon present SymPy pages [2-6], github help [8-9] and inspired by Sage guide [10]:

----------

.. .. rubric:: Footnotes

.. [1] http://lkml.org/lkml/2000/8/25/132

.. [2] http://docs.sympy.org/dev/sympy-patches-tutorial.html#quick-start
.. [3] http://sympy.org/development.html
.. [4] https://github.com/sympy/sympy/wiki
.. [5] https://github.com/sympy/sympy/wiki/Pushing-patches
.. [6] https://github.com/sympy/sympy/wiki/Getting-the-bleeding-edge
.. [7] https://github.com/sympy/sympy/wiki/Git-hg-rosetta-stone
.. [8] http://help.github.com/pull-requests/
.. [9] http://help.github.com/fork-a-repo/
.. [10] http://sagemath.org/doc/developer/



.. _SymPy:          http://sympy.org/
.. _issues:         http://code.google.com/p/sympy/issues/list
.. _mailinglist:    sympy@googlegroups.com_
.. _sympy@googlegroups.com:             http://groups.google.com/group/sympy
.. _sympy-patches@googlegroups.com:     http://groups.google.com/group/sympy-patches
.. _LICENSE:            https://github.com/sympy/sympy/blob/master/LICENSE
.. _New BSD License:    http://en.wikipedia.org/wiki/BSD_licenses#3-clause_license_.28.22New_BSD_License.22_or_.22Modified_BSD_License.22.29
.. _GitHub:             https://github.com/
.. _sympy/sympy:        https://github.com/sympy/sympy
