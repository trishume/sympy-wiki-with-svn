=====================
Development workflow
=====================

.. epigraph:: Talk is cheap. Show me the code.

    -- Linus Torvalds [1]_

.. contents:: Table of Contents




Introduction
=============

In SymPy_ we encourage collaborative work.

Everyone is welcome to join and to implement new feature, fix some bug, give
general advice, etc... Also, we try to discuss everything and to review each
other's work so that many eyes can see more thus raising the quality.

General discussion takes place on `sympy@googlegroups.com`_ mailing list and in
the issues_, and the code is discussed in `sympy-patches@googlegroups.com`_
mailing list. Also some discussion takes place on IRC (our channel is `#sympy at freenode`_).

As some of you already know, software development is not just coding. A lot
of non-coding tasks have to be done in order to produce *good* code. Just to
mention a few: setting up infrastructure, designing, testing, documenting,
assisting new developers (we are doing it here), and of course programming.

But even programming is not all about writing the code, it is about writing the
code *and* preparing it so that the code can be included into the project.

Both producing the code and bringing it to the project are important parts of
the game -- without the code there is nothing to bring in, and having the code
outside is a no-win for anyone.

As already said above, we review changes. This idea was borrowed from
successful projects like Linux, Python, SAGE and a lot more. In short each
change is first reviewed by other developers and only when it is approved the
code is pushed in.

Like it takes effort to write good and clear code, reviewing other's work needs
effort too. There are good practices how to do things so that reviewing is fun
for both the author and the reviewer. We try to follow them, and we'll try to
show you how to follow too.

By the way, when reviewing other's patches you *learn* a lot, so why not to join as a reviewer too?


How to send a patch
===================

License: `New BSD License`_ (see the `LICENSE`_ file for details) covers all files in the SymPy repository unless stated otherwise.

There are a few ways to create and send a patch.

The best way is to send a GitHub pull request against the `sympy/sympy`_ repository. We'll review it and push it in. 
The GitHub pull request is a preferred method, as that makes it easy for us to review and push the code in.

More quickly, but not convenient for reviewing and merging, is to create patch-file with the help of pure git.
This way can be used if the patch has high-priority or significant, only one or two files are involved or you just have not enough time for more accurate way.
(We will be thankful for any improvements of sympy.)

The basic work-flow for both variants is consist of a few stages:

1. Create your environment, if it was not created earlier.
2. Create separated branch
3. Modify code and/or create tests of it
4. Be sure that all tests of SymPy have been passed.
5. Only then commit changes
6. Create patch file or pull request for GitHub.

All those are described in the details below `Workflow process`_, but before you read that, it would be useful to acquaint yourself with `Coding conventions in Sympy`_.

If you have any questions you can ask them to us on the `mailinglist`_. 


Coding conventions in Sympy
============================

Standard Python coding conventions
-----------------------------------

Follow the standard Style Guide for Python Code when writing code for Sage, as explained at the following URLs:

    - http://www.python.org/dev/peps/pep-0008
    - http://www.python.org/dev/peps/pep-0257

In particular,

- Use 4 spaces for indentation levels.

- Use all lowercase function names with words separated by
  underscores. For example, you are encouraged to write Python
  functions using the naming convention

  ::

      def set_some_value()

  instead of the CamelCase convention.
  
- Use CamelCase for class names and major functions that create
  objects, e.g.
  
  ::
  
      class PolynomialRing(object)
  
Note, however, that some functions do have uppercase letters where it makes sense. For example for matrices they are LUdecomposition or T (transposition) methods.

Documentation strings
----------------------

The beginning of the docstring of methods or properties would look like this::

    """
    The convention is to end the first line of a docstring with a dot.
    
    More detailed description is optional, but it must be wrapped so that no
    line is longer than 80 characters.
    
    According to the "try_block_diag" parameter, it will try to form block
    diagonal matrices using the method get_diag_blocks(), invert these
    individually, and then reconstruct the full inverse matrix.

    Examples
    --------
    >>> from sympy import Matrix
    >>> m = Matrix(4, 3, lambda i, j: i*3 + j)
    >>> m
    [0,  1,  2]
    [3,  4,  5]
    [6,  7,  8]
    [9, 10, 11]
    >>> m.extract([0,1,3],[0,1])   #doctest: +NORMALIZE_WHITESPACE
    [0,  1]
    [3,  4]
    [9, 10]
    
    References
    ----------
    .. [1] W. Zhou & D.J. Jeffrey, "Fraction-free matrix factors: new forms
    for LU and QR factors". Frontiers in Computer Science in China,
    Vol 2, no. 1, pp. 67-80, 2008.

    See Also
    --------
    .submatrix()   : extract block from Matrix
    .T, diag()
    
    """
    
Also, if you start a module, docstring has to contain the description of main functions or classes if they are present.



Workflow process
=================

Create your environment
------------------------

Creating of environment is once-only.

As you are going to use `GitHub`_  you should have a GitHub account. If you have not one yet then just sign up at:

    - https://github.com/signup/free

Then begin your own *forking* of SymPy project (If you have not yet). Go at the SymPy GitHub repository:

    - https://github.com/sympy/sympy
    
and click the “Fork” button.

    [[img/dev-guide-forking.png]]

Now you have your own repository respect to SymPy project. If your username in GitHub is `mynick` then the forked project will be placed something like:
    
    - https://github.com/mynick/sympy
    
    [[img/dev-guide-forking-result.png]]
    

On your local machine choose work place, and clone (download) the code from SymPy's original repository (about 20 MiB)::

    $ git clone git://github.com/sympy/sympy.git
    $ cd sympy

Then assign your read-and-write repo to a remote called "github"::

    $ git remote add github git@github.com:mynick/sympy.git


Basic git settings
~~~~~~~~~~~~~~~~~~

Git tracks who makes each commit by checking the user’s name and email.
In addition, we use this info to associate your commits with your GitHub account.

To set these, enter the code below, replacing the name and email with your own (`--global` is optional).::

    $ git config --global user.name "Firstname Lastname"
    $ git config --global user.email "your_email@youremail.com"

The name should be your actual name, not your GitHub username.

Some tools connect to GitHub without SSH. To use these tools properly you need to find and configure your API Token.

On the GitHub site, click `“Account Settings”` > click `“Account Admin.”`

    [[img/dev-guide-apitoken.png]]

Then enter the code below, replacing the `mynick` and `012-api-token` with your own::

    $ git config --global github.user mynick
    $ git config --global github.token 012-api-token

*Note* If you ever change your GitHub password, a new token will be created and will need to be updated.


For more information about GitHub forking and tuning see: [8]_, [9]_ and [11]_.

Set up SSH keys
~~~~~~~~~~~~~~~~

To establish a secure connection between your computer and GitHub see detailed instructions in [11]_.

If you have any problems with SSH access to GitHub see troubleshooting instructions at [12]_, or ask us in mail-list.

And now, do not forget to go to the `Create separated branch`_ instructions before code changing.

Create separated branch
------------------------

From creating of brunches usually the work with issue is beginning. Also pull request related with them.

Think about branch name, that is similar to  topic of the patch or pull request, but short.
If you know the issue number then the branch name would be something like `1234_sequences`. So create it (first command) and go into (second) ::

    $ git branch 1234_sequences
    $ git checkout 1234_sequences

or in one command using ::

    $ git checkout -b 1234_sequences
    
To view in what branch you are type::

    $ git branch

It can be convenient to tune the bash to see current branch. For that, add the snippet below to your .bashrc or .bash_profile::

    PS1="[\u@\h \W\$(git branch 2> /dev/null | grep -e '\* ' | sed 's/^..\(.*\)/{\1}/')]\$ "

Don’t forget to “source” the file if need be, or restart terminal.

And remember, **never type the following commands in master**: `git merge`, `git commit`, `git rebase`.
    

Code modification
------------------

...

...

...

Do not forget that all new functionality should be tested, and all new methods/functions/classes should have some doctests showing how to use them.


Be sure that all tests of SymPy_ have been passed
-------------------------------------------------

To ensure everything stays in shape, let’s see if all tests pass::

    $ ./bin/test
    $ ./bin/doctest


If they are not passed all, then the warning *DO NOT COMMIT* will appear.

Code quality (unwanted spaces and indents) are checking by *./bin/test* utility too. But you can separately run this test with the help of this command::

    $ ./bin/test quality

If you have trailing whitespace it will show errors. This one will fix unwanted spaces.

    $ ./bin/strip_whitespace <file>
    
If you want to test only one set of tests try::

    $ ./bin/test sympy/concrete/tests/test_products.py

But remember that all tests should pass before committing.


Commit the changes
--------------------

You can check what files are changed::

    $ git status

Add new files to be upon version control system if necessary::

    $ git add new_file.py

Check total changes if it is interesting::
    
    $ git diff
    
So you are ready to commit changes in your local version control system. A commit also contains a `commit message` which describes it.

It is best if your commit messages are wrapped so that no line is longer than 80 characters.
Also, the first line should be separated from the rest of the message by a blank line.
This makes the message work the best with the various things in git and GitHub that show the message.

If your `commit message` is one line then you can use this command::

    $ git commit -m "1234: sequences base implementation."
    
or if you plan to enter big description::

    $ git commit
    
And editor windows will appear automatically in this case. In Linux, this is vim by default.  You can change what editor pops up by changing the `$EDITOR` shell variable.

Also with the help of option `-a` you can tell to the command `commit` to automatically stage files that have been modified and deleted, but new files you have not told git about will not be affected, e.g.,::

    $ git commit -a -m "1234: sequences base implementation."

If you want to stage only part of your changes, you can use the interactive commit feature.  Just type::

    $ git commit --interactive

and choose the changes you want in the resulting interface.


Create patch file or pull request for GitHub
----------------------------------------------

Be sure that you are in your own branch, and run::

    $ git push github 1234_sequences

Then navigate to your repository with the changes you want someone else to pull:

    https://github.com/mynick/sympy    
    
Select branch, and press the `Pull Request` button.

    [[img/dev-guide-pull-1-2.png]]

After pressing the `Pull Request` button, you are presented with a preview page where you can enter a title and optional description, see exactly what commits will be included when the pull request is sent, and also see who the pull request will be sent to:

    [[img/dev-guide-pull-2.png]]

If you’re sending from a topic branch, the title is pre-filled based on the name of the branch. Markdown is supported in the description, so you can embed images or use preformatted text blocks.

    [[img/dev-guide-pull-3.png]]

You can switch to the `Commits` tab to ensure that the correct set of changes is being sent. And review the diff of all changes by switching to the `Files Changed`.

Once you’ve entered the title and description, made any necessary customizations to the commit range, and reviewed the commits and file changes to be sent, press the `Send pull request` button.

The pull request is sent immediately. You’re taken to the main pull request discussion and review page. Additionally, all repository collaborators and followers will see an event in their dashboard.

That's all.

See also `Updating your pull request`_


Updating your pull request
---------------------------

If after a time you need to make changes in pull request then the best way is to again add new commit in you local repository and simply repeat push command::

    $ git commit -m "1234: some additional corrections."
    $ git push github 1234_sequences

Note that if you do any rebasing or in any way edit your commit history, you will have to add the `-f` option to push for it to work::

    $ git push -f github


Synchronization with master `sympy/sympy`.
-------------------------------------------

Note, that those operations must be carried out with accuracy and with understanding what you do.

**Your code changes and the history of them can be lost!**

This is a frequent situation, when branch is out of date with sympy/sympy repository.

Note, that after cloning a repository, it has a default remote called `origin` that points to the `sympy/sympy` repository.
And your fork remote named as `github`. You can observe the remotes names with the help of this command::

    $ git remote -v
    github  git@github.com:mynick/sympy.git (fetch)
    github  git@github.com:mynick/sympy.git (push)
    origin  git://github.com/sympy/sympy.git (fetch)
    origin  git://github.com/sympy/sympy.git (push)


As an example, consider that we have these commits in the master branch of local git repository::

  A---B---C        master

Then we have divergent branch `1234_sequences`::


    A---B---C           master
             \
              a---b     1234_sequences

In the meantime the remote `sympy/sympy` master repository was updated too::

    A---B---C---D       origin/master
    A---B---C           master
             \
              a---b     1234_sequences

There are basically two ways to get up to date with a changed master, rebasing and merging.  Rebasing is recommended for smaller branches, and is also the way to edit/squash commits (so you might as well do it if you are doing those too).  For people who are new to git, we pretty much exclusively recommend rebasing for this reason.  

For larger branches (like 20+ commits or so), there are some advantages to merging instead of rebasing.  Rebasing reapplies each commit iteratively over master, and if the state of the files changed by that commit is different from when it was originally made, the commit will change.   This means what you can end up getting commits that are broken, or commits that do not do what they say they do (because the changes have been "rebased out").  This can lead to confusion if someone in the future tries to test something by checking out commits from the history.  

Merging keeps everything intact.  The commits you make are exactly the same, down to the SHA1 hash, which means that if you checkout a commit from a merged branch, it is exactly the same as checking it out from a non-merged branch.  What it does instead is create a single commit, the merge commit, that makes it so that the history is both master and your branch.  This commit contains all merge conflict resolution information, which is another advantage of rebasing (all merge conflict resolutions when rebasing are "sifted" into the commits that caused them, making them invisible).  

Since the guide is aimed at new git users, they should be learning how to rebase.  Also, git rebase has a very friendly interface (compared to git merge) that guides you through each action (editing commits, fixing merge conflicts, etc.).  And while the merge conflicts resolutions will be hidden in the final result, they are easier to apply with git rebase because you only have to apply the resolution for one commit at a time, instead of the whole branch at once.  


Rebasing
~~~~~~~~~

The final aim, that we want to obtain is::

    A---B---C---D           master
                 \
                  a---b     1234_sequences

The way to do it is first of all to merge local repository with the remote `sympy/sympy`::

    $ git checkout master
    $ git pull

So we obtain::
 
    A---B---C---D       master
             \
              a---b     1234_sequences

Then::

    $ git checkout 1234_sequences
    $ git rebase master

Note that this last one will require you to fix some merge conflicts, because of the change in master to the same file. Open the file that it tells you is wrong, fix the code with **>>>** and **<<<** around it to what it should be.

Then be sure that  all tests pass::

    $ ./bin/test
    $ ./bin/doctest
    
Then do::
    
    $ git add sympy/matrices/your_conflict_file
    $ git rebase --continue

(git rebase will also guide you in this).

Changing of commit messages
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the task consist just in to edit commit messages then it might be more simple rebasing usage.
Consider these commit messages::

    $ git log --oneline
    7bbbc06 bugs fixing
    4d6137b some additional corrections.
    925d88fx sequences base implementation.


Then run *rebase* command in interactive mode::

    $ git rebase --interactive 925d88fx

Or you can use other ways to point to commits, e.g. *`git rebase --interactive HEAD^^`*
or *`git rebase --interactive HEAD~2`*.

New editor window will appear (note that order is reverted with comparison of `git log` command)::

    pick 4d6137b some additional corrections.
    pick 7bbbc06 bugs fixing

    # Rebase 925d88f..7bbbc06 onto 925d88f
    #
    # Commands:
    #  p, pick = use commit
    #  r, reword = use commit, but edit the commit message
    #  e, edit = use commit, but stop for amending
    #  s, squash = use commit, but meld into previous commit
    #  f, fixup = like "squash", but discard this commit's log message

Change *pick* to *reword* (or on old versions of git, to *edit*) for those that you want to edit and save that file.

After that, git will drop back you into your editor for every commit you want to reword, and into the shell for every commit you wanted to edit::

    $ (Change the commit in any way you like.)
    $ git commit --amend "your new message"
    $ git rebase --continue

Most of this sequence will be explained to you by the output of the various commands of git. Continue until it says,::

    Successfully rebased and updated refs/heads/master.

Merging
~~~~~~~~

Note, that for people who are new to git, we pretty much exclusively recommend rebasing for the above reasons.

Nevertheless, firstly merge local repository with the remote::

    $ git checkout master
    $ git pull

This result in::

    A---B---C---D       master
             \
              a---b     1234_sequences

Then merge your `1234_sequences` branch from `1234_sequences`::

    $ git checkout 1234_sequences
    $ git merge master

Probably the last command will tell you that conflicts are must be solved for a few indicated files.

If that's the case then the marks **>>>** and **<<<** will appear at those files. Fix the code with **>>>** and **<<<** around it to what it should be.
You must manually remove useless pieces, and leave only new changes from your branch.

Then be sure that  all tests pass::

    $ ./bin/test
    $ ./bin/doctest

and commit::

    $ git commit -m "Merging with master"

So the result will be like that (automatic merging `c`)::

    A---B---C-------D     master
             \       \ 
              a---b---c   1234_sequences



Quick patch variant
====================

Note that the GitHub variant is *highly* preferred, and will increase your chances of the patch not being lost or forgotten about.

In this way just clone read-only copy::

    $ git clone git://github.com/sympy/sympy.git
    $ cd sympy

then you can create git branch, for your code modifications.

Also take into account all which was  written for the GitHub procedure about git tuning, code conversions, the testing and the commit operations.

Then just create patch-file::

    $ git format-patch master --stdout > 1234_sequences_base_implementation.patch

And send us it. 

.. .. rubric:: Footnotes

This page based upon present SymPy_ pages [2-6], GitHub help [8-9], [11-12] and inspired by Sage guide [10]:

.. [1] http://lkml.org/lkml/2000/8/25/132

.. [2] http://docs.sympy.org/dev/sympy-patches-tutorial.html#quick-start
.. [3] http://sympy.org/development.html
.. [4] https://github.com/sympy/sympy/wiki
.. [5] https://github.com/sympy/sympy/wiki/Pushing-patches
.. [6] https://github.com/sympy/sympy/wiki/Getting-the-bleeding-edge
.. [7] https://github.com/sympy/sympy/wiki/Git-hg-rosetta-stone
.. [8] http://help.github.com/pull-requests/
.. [9] http://help.github.com/fork-a-repo/
.. [10] http://sagemath.org/doc/developer/
.. [11] http://help.github.com/linux-set-up-git/
.. [12] http://help.github.com/troubleshooting-ssh/




.. _SymPy:          http://sympy.org/
.. _issues:         http://code.google.com/p/sympy/issues/list
.. _mailinglist:    sympy@googlegroups.com_
.. _sympy@googlegroups.com:             http://groups.google.com/group/sympy
.. _sympy-patches@googlegroups.com:     http://groups.google.com/group/sympy-patches
.. _LICENSE:            https://github.com/sympy/sympy/blob/master/LICENSE
.. _`New BSD License`:    http://en.wikipedia.org/wiki/BSD_licenses#3-clause_license_.28.22New_BSD_License.22_or_.22Modified_BSD_License.22.29
.. _GitHub:             https://github.com/
.. _sympy/sympy:        https://github.com/sympy/sympy
.. _`#sympy at freenode`                 irc://irc.freenode.net/sympy
