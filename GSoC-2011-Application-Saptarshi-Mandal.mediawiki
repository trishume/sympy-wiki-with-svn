Title:	 SymPy: Writing a combinatorics package for sympy 
Student:	 Saptarshi Mandal 
Abstract: 	 Sympy currently has little support for combinatorial algorithms found in such packages such as Combinatorica. I plan on implementing and maintaining such a package for Sympy.

== Name and Contact Info ==

Name: Saptarshi Mandal

Email: sapta.iitkgp@gmail.com

IRC: saptman on freenode

Phone: Will give to mentor if asked

== Synopsis ==

My Soc proposal is to implement some algorithms of Combinatorica in SymPy.

The algorithms provided in combinatorica have wide applications in fields such as information theory, theoretical computer science, cryptography and networks. Mathematica has arguably, the best implementation of a suite of combinatorial tools [1]. Another competing python CAS, Sage maintains a page indicating what aspects of Combinatorica it has implemented [SageRef]. Currently most of the algorithms presented in these packages are unimplemented in Sympy. The primary issue is the vast size of the implemented methods, many of which rely on non-trivial algorithms, which necessitates prudence in the choice of the techniques one wishes to implement.

I will be developing against the list of algorithms published in [1]. There, the algorithms are divided into 5 categories, a)Subsets and Permutations, 
b)Partitions and Compositions, 
c)Graph Construction and Representations, 
d)Graph Properties and
e)Graph Algorithms. 
I do not plan on implementing the last category as it is fairly straightforward and could be written later by other SymPy newbies as myself.

Most of the algorithms required to implement the functionality covered in (a) and (b) are described in TAOCP Vol 4. Wherever possible (time permitting obviously) I will implement a few variations of these algorithms. For example, random permutations can be generated both by the original Fisher Yates as well as Durstenfeld's variant. I will implement both and give the user the option of using the one he wants. I can refer to other material as well such as coursework or lecture notes posted on several university websites. The above will require comprehensive usage of Python's functional features and as such will afford me a chance to apply functional programming idioms for solving them.

The graph construction feature is a bit more tricky. I could try to visualize graphs using Ascii on the console but that will look extremely ugly. Some other techniques I have thought of are to generate SVGs or use PyQt. Since PyQt will only be used for graph visualization, and since the philosophy of SymPy is that its easily accessible from the console I want to refrain from adding unnecessary dependencies and would prefer using SVGs instead. The best way in my opinion is to use graphviz [9] as it is a mature library and has several Python bindings and is very easy to use. It has several algorithms to visualize graphs of all types and sizes and does a pretty good job of it. Alternatively I could use Pyglet just as it has been used in the plotting library of Sympy.

Graph properties will be interesting to implement and will be dependent on the linear algebra library of Sympy for operations such as computing the diameter of a graph, its chromatic polynomial, chromatic number as well as performing some checks such as testing if two graphs are isomorphic.

== Deliverables ==


I plan on roughly following the given schedule but uncertainty will always be there. I will however be in touch with my mentor(s) at all time.



== Community Bonding Period ==

I have been developing an integral equation solver for the past few months which have helped me learn Python and Sympy simultaneously. It mimics the functionality of intsolve in Maple and I hope to get it pushed in soon so that I will have a significant contribution to Sympy before I begin. I have a working knowledge of git. I have already begun prelim work on my project and intend to push some code onto my development branch. I also intend to read up on spectral graph theory as well as carefully reread parts of TAOCP Vol 4. I have also taken a look at the code of Sage which will be useful for the graph theoretic algorithms.

=== Beginning of the Program ===

* Week 1 [Permutations]: I will begin work on the permutations feature. Algorithms for generating all permutations have been given in TAOCP. The stock permutations command will also have options for permutations of n things with k cycles as well as permutations of n items with k runs. I will also implement lexicographic ordering of the permutations as well as other other features like generating derangements and involutions. Other features such as depicting the graph of a permutation can be done later when the graph module is ready.

* Week 2 [Subsets]: Again many of these algorithms have been described in TAOCP. Apart from implementing techniques to generate all subsets including simply the generation of k-subsets of an n set I will also implement methods to enumerate subsets using Gray Code and binary representation. Ordering subsets will involve some introspection. For example, if the set is of polynomials, ranking it would involve finding its degree which will depend directly on the polys module.

* Week 3 [Integer partitions]: Implementing integer partitions will also be quite straightforward. Apart from listing all possible partitions I will also implement listing partitions of n whose largest part is k as well as all k-partitions of n. I will also implement Ferrers Diagram, which is a way to visualize a partition. Apart from TAOCP I will also refer to [5]

* Week 4 [Set partitions and generating all trees]: I expect this component to be developed in much the same fashion as the previous ones. Apart from generating all set partitions, k-set partitions and random partitions I can also implement algorithms to generate all trees. Algorithms for ranking and unranking are also covered in TAOCP which I shall implement if time permits.

* Weeks 5-6 [Permutation groups]: Implementing permutation groups will be a bit tricky as I will need to revise my notes for my Abstract Algebra course. My primary reference for this will be [7]. Most of my time will be taken up in implementing the Schreier-Sims algorithm whose implementation details can be found in [8]. After I am done with this I can write code for generating cyclic groups and dihedral groups. Generating the group of automorphisms of a graph will be implemented later.

* Week 7: Create a demo for showing graphs visually from within Sympy. Allow import and export of graphviz .dot files. Generate SVGs from graphs.
=== Midterms ===

* Weeks 8-9: Work on graph representation as well as supporting some basic functionality such as making a graph, showing it visually, converting to an adjacency matrix/list as well as generating some special graphs such as Harary graphs, complete graphs, caterpillars, hypercubes, etc. I will also research graphviz to see the different algorithmic techniques to visualize graphs. Components of previous modules that would have required the graph module to be done will be completed in this week.

* Weeks 10-11: Implement algorithms to determine various properties of a graph. Computing properties such as diameter of a graph, its chromatic polynomial and its chromatic number will directly depend on the linear algebra package as these require operations to be performed on the adjacency matrix representation of the graph. Apart from implementing algorithms for finding cycles and connected components I also plan on implementing some predicates for comparing graphs, testing if it is acyclic, if it has a clique or self loops and so on.

* Week 12: Polish the code, fix tests and docstrings.

== Related Work ==

Apart from Combinatorica and Sage, maple has the combinat library. Where Mathematica really shines though is their graph visualization tools. For graph visualization, it seems that graphviz is a good choice. It is a mature library and offers a vast selection of algorithms to display graphs and has several Python bindings.

== Biographical Information ==

I am a final year student at IIT Kharagpur majoring in Mathematics and Computing. I have taken courses in Real, Complex and Functional Analysis as well as Abstract Algebra, Number Theory and Graph Theory.

I have taken several programming courses as well and am an ardent fan of Haskell and F#. I have solved some Project Euler problems in F#. I do not particularly like Java or C++ but I have done a significant amount of programming in them. This is my first foray into an open source project and so far it has been quite fun. Last summer I interned in Germany under Prof Michael Bohm in the University of Bremen where I worked on Sobolev spaces and PDE theory. Before that I worked under Prog Rajasekhar in my department on applications of Greens function for solving pdes as well as boundary element methods.

I do not have any plans for the summer as I will be graduating and will be at home. I had planned a month long vacation which I will cut down to 3-4 days if I get selected.

My github account's URL is http://github.com/saptman. The relevant branches are dev_ide and combinatorics. Communicating on IRC is a bit problematic for now because of the time difference. I reply to any email as soon as I can though.

== Sources ==

[0] http://reference.wolfram.com/mathematica/Combinatorica/guide/CombinatoricaPackage.html

[1] wiki.sagemath.org/CombinatoricaCompare

[2] TAOCP Vol 4, Donald Knuth

[3] Spectral Graph Theory, Fan Chung

[4] Computational Discrete Mathematics: Combinatorics and Graph Theory in Mathematica, Pemmaraju and Skiena

[5] Fast algorithms for generating integer partitions, Zoghbi et al., Intern. J. Computer Math, Vol 70, pp 319-332

[6] A Fast algorithm for generating set partitions, M. C. Er, The Computer Journal, Vol 31, No. 3

[7] Permutation group algorithms, Akos Seress

[8] Implementation of 3 types of Schreier-Sims Algorithm, Martin Jaggi, MAS334 Project, QMU London

[9] http://www.graphviz.org/