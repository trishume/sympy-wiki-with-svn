under construction ...

Elastic Layer Analysis (ELA)
============================

Introduction
------------

The following is an example of SymPy in action. This example demonstrates the use of various SymPy functions, specifically the use of matrix algebra and integration techniques to solve an engineering problem i.e. the analysis of the stress, strain and displacement response of an elastic layered structure to imposed surface loads. Typically these problems are solved using finite element methods (FEM) but a simple numerical solution based on the [[Hankel transformation|http://en.wikipedia.org/wiki/Hankel_transform]] of a stress function has been in use since it was introduced by Burmister [1]_. 

Elastic layer analysis (ELA) is routinely used in pavement engineering for the design and evaluation of road and airport structures. As with any structure, roads are designed and constructed to carry surface loads - the heavier the load, the stronger the structure needed. Concrete pavements on interstate highways, for example, are durable structures that can withstand very high compressive loads but a thin layer of concrete has a relatively low flexural strength and must therefore be supported to prevent excessive bending. This is typically achieved by paving the concrete layer of top of a cemented or stabilized base layer. The base layer in turn may be placed on top of a strong granular subbase layer, which in turn covers the foundation or subgrade, which is usually the weakest layer in the structure. Building stronger layers on top of the subgrade serves to protect it from excessive deformation. Figure 1 illustrates a typical pavement structure. 

[Figure 1 here]

For the elastic analysis of the pavement structure shown in Figure 1, the different layers are assumed to be homogeneous and isotropic. The materials used in each layer are defined by elastic parameters i.e. Young's modulus (\( E \)) and Poisson's ratio (\( \nu \)). Each layer has a finite thickness except the lowest subgrade layer, which is assumed to have an infinite thickness. The nature of the interface between successive layers dictates how stresses and displacements are transferred from one layer to another. For the purpose of this example, full-friction between the layers is assumed, therefore shear stresses and lateral displacements at the lower interface of any layer are equal to those at the top interface of the underlying layer.

Problem Formulation
-------------------

Stresses and displacements written to show the Hankel form are:
\[\sigma_{z}=\int_{0}^{\infty}\xi^{2}\left(\left(-A\xi+C\left(1-2\nu-\xi z\right)\right)e^{\xi z}+\left(B\xi+D\left(1-2\nu+\xi z\right)\right)e^{-\xi z}\right)\\mathrm{J}_0\left(r\xi\right)\xi\,d\xi\]
\[\tau_{rz}=\int_{0}^{\infty}\xi^{2}\frac{\\mathrm{J}_1\left(r\xi\right)}{\\mathrm{J}_0\left(r\xi\right)}\left(\left(A\xi+C\left(2\nu+\xi z\right)\right)e^{\xi z}+\left(B\xi+D\left(1-2\nu+\xi z\right)\right)e^{-\xi z}\right)\\mathrm{J}_0\left(r\xi\right)\xi\,d\xi\]
\[w=\frac{1+\nu}{E}\int_{0}^{\infty}\xi\left(\left(-A\xi+C\left(2-4\nu-\xi z\right)\right)e^{\xi z}-\left(B\xi+D\left(2-4\nu+\xi z\right)\right)e^{- \xi z}\right)\\mathrm{J}_0\left(r\xi\right)\xi\,d\xi\]
\[u=\frac{1+\nu}{E}\int_{0}^{\infty}\xi\frac{\\mathrm{J}_1\left(r\xi\right)}{\\mathrm{J}_0\left(r\xi\right)}\left(\left(A\xi+C\left(1+\xi z\right)\right)e^{\xi z}-\left(B\xi-D\left(1-\xi z\right)\right)e^{-\xi z}\right)\\mathrm{J}_0\left(r\xi\right)\xi\,d\xi\]

\(\sigma_{z}\), \(\tau_{rz}\)
    vertical compressive and shear stress
\(u\), \(w\)
    lateral and vertical displacement
\(\\mathrm{J}_0, \\mathrm{J}_1\)
    [[Bessel|http://en.wikipedia.org/wiki/Bessel_function]] functions of the first kind of orders 0 and 1
\(\xi\), \(r\), \(z\)
    Hankel parameter, radial position in cylindrical coordinates and vertical position
\(A,B,C,D\)
    integration constants

The *unknowns* in the stress and displacement equations are the four integration constants. These may be determined by applying boundary conditions. 

Boundary Conditions
^^^^^^^^^^^^^^^^^^^

The boundaries of the elastic layer system include the surface, interfaces between the layers and the infinite lowest layer. 

**Surface.** For the purpose of this example it is assumed that the loads imposed on the system are circular surface loads defined by a radius (a) and a uniform pressure (p), the circular imprint simulates the impression of vehicle tyres. If only a vertical uniformly distributed circular load is considered:
\[
r\leq a \left\{
\begin{array}{l l}
\sigma_{z}\left(r,0\right)=-p\\\
\tau_{rz}=0\\\
\end{array}\right.
\]
\[
r\gt a \left\{
\begin{array}{l l}
\sigma_{z}\left(r,0\right)=0\\\
\tau_{rz}=0\\\
\end{array}\right.
\]

In the Hankel domain, the load may be determined as:
\[q=\int_{0}^{\infty}rp\\mathrm{J}_0\left(\xi r\right)\,dr=\frac{pa}{\xi}\\mathrm{J}_1\left(\xi a\right)\]

**Interlayers.** As indicated previously, with full friction, to ensure equilibrium, stresses and displacements at the interlayers are equal:
\[\sigma_{z}^{i}\left(r,h_{i}\right)=\sigma_{z}^{i+1}\left(r,0\right)\]
\[\tau_{rz}^{i}\left(r,h_{i}\right)=\tau_{rz}^{i+1}\left(r,0\right)\]
\[u_{r}^{i}\left(r,h_{i}\right)=u_{r}^{i+1}\left(r,0\right)\]
\[u_{z}^{i}\left(r,h_{i}\right)=u_{z}^{i+1}\left(r,0\right)\]

**Infinite lower layer.** All stresses and displacements approach zero at infinite depth (\(z\rightarrow\infty\)). It can be shown that this implies that the integration constants \(A\) and \(C\) for this layer are zero.

Applying the boundary conditions allows the integration constants to be solved. Depending on the number of layers (n) in the system, the number of equations to solve is 4n-2. The solved constants may then be substituted into the stress and displacement equations, which are integrated to determine response to surface loads at specific evaluation positions (\(r\) and \(z\)). To demonstrate the process, consider a single layer subjected to a single circular load.

One layer solution
------------------

Applying the problem formulation and boundary conditions outlined above, the following code listing shows the variation in normal stress with depth for a single layer under a circular load.   

```python
from sympy import Symbol,Matrix,exp,lambdify
from sympy.mpmath import sqrt,quad,quadosc,inf,pi
from time import time

"""
one.py

Calculate the stress variation with depth beneath
a single layer subjected to a circular load.

"""

xi=Symbol('xi')     # Hankel parameter
j0=Symbol('j0')     # Bessel function J0
j1=Symbol('j1')     # Bessel function J1
nu0=Symbol('nu0')   # Poisson's ratio of layer
a=Symbol('a')       # Load radius
z=Symbol('z')       # Vertical evaluation position

q=j1(xi*a)          # Hankel transformed load

def hsz(z,nu):
    """
    Constants for Hankel transformed normal stress
    
    """ 
    a1=exp(xi*z)
    b1=-exp(-xi*z)
    c1=-(1-2*nu-xi*z)*exp(xi*z)
    d1=-(1-2*nu+xi*z)*exp(-xi*z)
    return a1,b1,c1,d1

def htrz(z,nu):
    """
    Constants for Hankel transformed shear stress
    
    """ 
    a2=exp(xi*z)
    b2=exp(-xi*z)
    c2=(2*nu+xi*z)*exp(xi*z)
    d2=-(2*nu-xi*z)*exp(-xi*z)
    return a2,b2,c2,d2

def s_z(r,z,nu,A,B,C,D):
    """
    Normal stress function
    
    """
    if r==0:
        return (A-C*(1-2*nu-xi*z))*exp(xi*z)-(B+D*(1-2*nu+xi*z))*exp(-xi*z)
    else:
        return ((A-C*(1-2*nu-xi*z))*exp(xi*z)-(B+D*(1-2*nu+xi*z))*exp(-xi*z))*j0(r*xi)

# Apply boundary condition for surface load (z=0)
a1,b1,c1,d1=hsz(0,nu0)
a2,b2,c2,d2=htrz(0,nu0)

# For this single infinite layer the integration constants A and C are zero.
P=Matrix([[b1,d1],[b2,d2]])
R=Matrix(2,1,[1,0])

# 2 equations, 2 unknowns - solve the integration constants
B0,D0=P.LUsolve(R)

# Substitute constants into stress equation (s_z)
# Determine the stress as a function of z beneath the load (r=0). Note: A=C=0
sz=s_z(0,z,nu0,0,B0,0,D0)*q
```

The function sz in the above listing is the integrand of the normal stress with depth (z). Integrating this function provides the general solution: 
\[szz=\int_{0}^{\infty}\left(1+\xi z\right)e^{-\xi z}\\mathrm{J}_1\left(a \xi\right)\,d\xi\]

Solving the integration constants
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

For the infinite layer, the integration constants A and C are zero. To solve for the other constants, B and D, the boundary conditions on the surface are applied i.e. [[Matrix|http://docs.sympy.org/dev/modules/matrices.html?highlight=matrix#sympy.matrices.matrices.Matrix]] P. To simplify the solution of the integration constants, the response matrix, R, is set to Matrix(2,1,[1,0]) instead of Matrix(2,1,[q,1]) and the transformed load is applied just before integration by multiplying sz by q. Thus we have two equations and two unknowns. Use is made of the [[LUsolve|http://docs.sympy.org/dev/modules/matrices.html?highlight=lusolve#sympy.matrices.matrices.Matrix.LUsolve]] function to solve for B and D:
\[
\begin{bmatrix} 
-1 & -1+2\nu \\\ 
1 & -2\nu 
\end{bmatrix} \begin{bmatrix} 
B \\\ 
D 
\end{bmatrix} = \begin{bmatrix} 
1 \\\
0
\end{bmatrix}
\]

Instead of using the *LUsolve* function, an alternative approach would be to multiply the response matrix R by the inverse of the global matrix P:
```python
B0,D0=P.inv()*R
```

Integrating the stress function
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Sympy does not currently include Bessel functions of the first kind, therefore to solve the stress function it is necessary to firstly lambdify[provide link???] the integrand (see the code segment below). This converts all Sympy functions to corresponding mpmath functions. This was the reason for defining the Sympy functions j0 and j1, which when *lambdified* are converted into the corresponding mpmath functions [[j0|http://mpmath.googlecode.com/svn/tags/0.16/doc/build/functions/bessel.html?highlight=j1#mpmath.j0]] and [[j1|http://mpmath.googlecode.com/svn/tags/0.16/doc/build/functions/bessel.html?highlight=j1#mpmath.j1]]. 

The integrand sz is a function of the Bessel of order 1 and an exponential function of the order -\(\xi z\). On the surface (z=0), the exponential function is eliminated, and the integrand is simply a function of the Bessel, which is very highly oscillatory. Figure 2 shows the behaviour of sz at the surface and at a depth of 100 mm. Clearly, the exponential serves to dampen the Bessel oscillations.   

[Figure 2 here]

Figure 2 emphasises the problem of determining a solution for the stress function at (or near) the surface of the structure. Integration techniques such as the mpmath [[quad|http://mpmath.googlecode.com/svn/trunk/doc/build/calculus/integration.html?highlight=quad#mpmath.quad]] will fail and it becomes necessary to apply integration methods that account for the oscillatory behaviour. One option is to use the mpmath integration function [[quadosc|http://mpmath.googlecode.com/svn/tags/0.16/doc/build/calculus/integration.html?highlight=quadosc#mpmath.quadosc]]. For application of *quadosc* it is necessary to estimate the period of the integrand. This is demonstrated by tagging the following code segment onto that above and running to integrate sz. Note how the integrand is multiplied by \(p\) and \(a\) following the integration to determine the vertical normal stress at the respective depths.

```python
p=0.69              # Load pressure (MPa)
F=20000.            # Load force (Newton)
aa=sqrt(F/(p*pi))   # Load radius (mm)

print "\nIntegration method 1 (z=0)"
t = time()
f=sz
f=f.subs(z,0)
f=f.subs(a,aa)
f=lambdify(xi,f,"mpmath")
szz=-p*aa*quad(f,[0,inf],verbose=True)
print "szz: ",szz
print "Time: ",time()-t

print "\nIntegration method 2 (z=0)"
t = time()
f=sz
f=f.subs(z,0)
f=f.subs(a,aa)
f=lambdify(xi,f,"mpmath")
szz=-p*aa*quadosc(f,[0,inf],period=pi)
print "szz: ",szz
print "Time: ", time()-t

print "\nIntegration method 3 (z=0)"
t = time()
f=sz
f=f.subs(z,0)
f=f.subs(a,aa)
f=lambdify(xi,f,"mpmath")
szz=-p*aa*quadosc(f,[0,inf],period=2*pi/aa)
print "szz: ",szz
print "Time: ", time()-t

print "\nIntegration method 1 (z=100)"
t = time()
f=sz
f=f.subs(z,100)
f=f.subs(a,aa)
f=lambdify(xi,f,"mpmath")
szz=-p*aa*quad(f,[0,inf],verbose=True)
print "szz: ",szz
print "Time: ",time()-t

print "\nIntegration method 3 (z=100)"
t = time()
f=sz
f=f.subs(z,0)
f=f.subs(a,aa)
f=lambdify(xi,f,"mpmath")
szz=-p*aa*quadosc(f,[0,inf],period=2*pi/aa)
print "szz: ",szz
print "Time: ", time()-t
```

The output:
```text
Integration method 1 (z=0)
Integrating from 0 to +inf (degree 1 of 6)
Integrating from 0 to +inf (degree 2 of 6)
Estimated error: 4.31832e+8
Integrating from 0 to +inf (degree 3 of 6)
Estimated error: 1.0
Integrating from 0 to +inf (degree 4 of 6)
Estimated error: 1.0
Integrating from 0 to +inf (degree 5 of 6)
Estimated error: 1.0
Integrating from 0 to +inf (degree 6 of 6)
Estimated error: 1.0
Failed to reach full accuracy. Estimated error: 1.0
szz:  8058863524.695
Time:  1.09746789932

Integration method 2 (z=0)
szz:  -0.689999990998652
Time:  289.689537048

Integration method 3 (z=0)
szz:  -0.69
Time:  2.73873400688

Integration method 1 (z=100)
Integrating from 0 to +inf (degree 1 of 6)
Integrating from 0 to +inf (degree 2 of 6)
Estimated error: 0.00217811
Integrating from 0 to +inf (degree 3 of 6)
Estimated error: 0.001
Integrating from 0 to +inf (degree 4 of 6)
Estimated error: 1.0e-9
Integrating from 0 to +inf (degree 5 of 6)
szz:  -0.431176903899328
Time:  0.585129022598

Integration method 3 (z=100)
szz:  -0.431176903899328
Time:  0.899243116379
```

From the output it can be seen that *quad* fails to integrate the sz function at the surface but *quadosc* with the period correctly set is very efficient. With the period not set correctly, *quadosc* provides an accurate solution, but after a long wait. At depths greater than 0, *quad* provides a rapid and accurate solution of the stress function. In fact, at greater depths, *quad* will provide a more accurate solution than *quadosc*. Note the use of the Sympy [[subs|http://docs.sympy.org/dev/modules/core.html?highlight=subs#sympy.core.basic.Basic.subs]] function to substitute numerical values for the symbolic expressions. 

Two layer solution
------------------

With two layers (n=2) the number of integration constants is 4n-2 = 6 i.e. A0,B0,C0,D0 for the first layer and B1,D1 for the infinitely thick second layer with A1 = C1 = 0. In addition to applying the boundary conditions at the surface, the equality of stresses and displacements at the interface between the two layers provides a solution for the integration constants. 

On the surface the normal stress is the applied load and the shear stress is zero:
\[
\begin{bmatrix}
1 & -1 & -1 + 2 \nu_{0} & -1 + 2 \nu_{0}\\\
1 & 1 & 2 \nu_{0} & - 2 \nu_{0}
\end{bmatrix} \begin{bmatrix} 
A0 \\\ 
B0 \\\
C0 \\\
D0 \\\
\end{bmatrix} = \begin{bmatrix} 
1 \\\
0
\end{bmatrix}
\]

At the interface (z=\(h_{0}\)):
\[
\begin{bmatrix}e^{h_{0} \xi} & - e^{- h_{0} \xi} & - \left(1 - 2 \nu_{0} - h_{0} \xi\right) e^{h_{0} \xi} & - \left(1 - 2 \nu_{0} + h_{0} \xi\right) e^{- h_{0} \xi}\\\
e^{h_{0} \xi} & e^{- h_{0} \xi} & \left(2 \nu_{0} + h_{0} \xi\right) e^{h_{0} \xi} & \left(- 2 \nu_{0} + h_{0} \xi\right) e^{- h_{0} \xi}\\\
e^{h_{0} \xi} & e^{- h_{0} \xi} & - \left(2 - 4 \nu_{0} - h_{0} \xi\right) e^{h_{0} \xi} & \left(2 - 4 \nu_{0} + h_{0} \xi\right) e^{- h_{0} \xi}\\\
e^{h_{0} \xi} & - e^{- h_{0} \xi} & \left(1 + h_{0} \xi\right) e^{h_{0} \xi} & \left(1 - h_{0} \xi\right) e^{- h_{0} \xi}\end{bmatrix}\begin{bmatrix} 
A0 \\\ 
B0 \\\
C0 \\\
D0 \\\
\end{bmatrix} = \begin{bmatrix}-1 & -1 + 2 \nu_{1}\\\
-1 & -1 + 2 \nu_{1}\\\
\frac{\mu_{1}}{\mu_{0}} & \frac{\mu_{1} \left(2 - 4 \nu_{1}\right)}{\mu_{0}}\\\
- \frac{\mu_{1}}{\mu_{0}} & \frac{\mu_{1}}{\mu_{0}}\end{bmatrix}\begin{bmatrix} 
B1 \\\
D1 \\\
\end{bmatrix}
\]

Bringing these together into a single matrix:
\[
\begin{bmatrix}e^{h_{0} \xi} & - e^{- h_{0} \xi} & - \left(1 - 2 \nu_{0} - h_{0} \xi\right) e^{h_{0} \xi} & - \left(1 - 2 \nu_{0} + h_{0} \xi\right) e^{- h_{0} \xi} & 1 & 1 - 2 \nu_{1}\\\
e^{h_{0} \xi} & e^{- h_{0} \xi} & \left(2 \nu_{0} + h_{0} \xi\right) e^{h_{0} \xi} & \left(- 2 \nu_{0} + h_{0} \xi\right) e^{- h_{0} \xi} & 1 & 1 - 2 \nu_{1}\\\
e^{h_{0} \xi} & e^{- h_{0} \xi} & - \left(2 - 4 \nu_{0} - h_{0} \xi\right) e^{h_{0} \xi} & \left(2 - 4 \nu_{0} + h_{0} \xi\right) e^{- h_{0} \xi} & - \frac{\mu_{1}}{\mu_{0}} & - \frac{\mu_{1} \left(2 - 4 \nu_{1}\right)}{\mu_{0}}\\\
e^{h_{0} \xi} & - e^{- h_{0} \xi} & \left(1 + h_{0} \xi\right) e^{h_{0} \xi} & \left(1 - h_{0} \xi\right) e^{- h_{0} \xi} & \frac{\mu_{1}}{\mu_{0}} & - \frac{\mu_{1}}{\mu_{0}}\\\
1 & -1 & -1 + 2 \nu_{0} & -1 + 2 \nu_{0} & 0 & 0\\1 & 1 & 2 \nu_{0} & - 2 \nu_{0} & 0 & 0\end{bmatrix}
\]


.. [1] Burmister, D.M (1945), The General Theory of Stresses and Displacements in Layered Systems, Journal of Applied Physics, Vol. 16, p.89-94